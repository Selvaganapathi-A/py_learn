import asyncio
import os

from authlib.jose import JsonWebKey, JWTClaims, OctKey, jwt


async def alt_main():
    ALGORITHMS: tuple[str, ...] = (
        'HS256',
        'HS384',
        'HS512',
    )
    claims = {
        'iss': 'https://example.com/.well-known/jwks.json',
        'sub': '1234567890',
        'aud': 'John Doe',
        'iat': 157746600.0,
        'nbf': 946665000.0,
        'exp': 1765564199.999999,
        'jti': (
            '6fdddab7d670f202629531c1a51b32ca30696d0af4dd5b0f'
            'bb5f82c0aba5e505110455f37d7ef73950c2bb0495a38f56'
        ),
        'name': 'John Doe',
    }
    #
    # ! Claims are set to expire on 2026
    # * create jwk
    # key: OctKey = OctKey.generate_key(32, {'kid': 'some arbitrary string'})
    # * Generate New Key on Each run
    # key: OctKey = OctKey.generate_key(256, {'kid': 'some arbitrary string'})
    # * Reuse Existing Key
    key: OctKey = OctKey.import_key(
        {
            'kty': 'oct',
            'k': 'o1X8HwkSSCiJQfWsto5IjkH8ZvTs9alZjHXcMbPQbO4',
            'kid': 'some arbitrary string',
        }
    )
    print('JWK : ', key.as_json())
    print('Shared Secret :', key.as_dict().get('k'))
    print()
    #
    for algorithm in ALGORITHMS:
        # * sign jwt
        header = {
            'alg': algorithm,
            'typ': 'JWT',
        }
        # alg must be one of HS256, HS384, HS512
        json_token = jwt.encode(header, payload=claims, key=key)
        print(json_token.decode())
        print()
        #
        # * verify
        received: JWTClaims = jwt.decode(json_token, key=key)
        received.validate()
        print(received)
        print()


async def main():
    ALGORITHMS: tuple[str, ...] = (
        'HS256',
        'HS384',
        'HS512',
    )
    claims = {
        'iss': 'https://example.com/.well-known/jwks.json',
        'sub': '1234567890',
        'aud': 'John Doe',
        'iat': 157746600.0,
        'nbf': 946665000.0,
        'exp': 1765564199.999999,
        'jti': (
            '6fdddab7d670f202629531c1a51b32ca30696d0af4dd5b0f'
            'bb5f82c0aba5e505110455f37d7ef73950c2bb0495a38f56'
        ),
        'name': 'John Doe',
    }
    # ! Claims are set to expire on 2026
    #
    # # one of either os generated bytes or super secret text as key
    shared_key = os.urandom(64)
    print()
    # * extract key for jwt Verification
    # # ! generate new key for eackh application
    key: OctKey = JsonWebKey.import_key(
        shared_key,  # type: ignore
        {
            'kty': 'oct',
            'k': shared_key,
        },
    )
    #
    print('JWK : ', key.as_json())
    print('Shared Secret :', key.as_dict().get('k'))
    print()
    #
    for algorithm in ALGORITHMS:
        # * sign jwt
        header = {
            'alg': algorithm,
            'typ': 'JWT',
        }
        # alg must be one of HS256, HS384, HS512
        json_token = jwt.encode(header, payload=claims, key=shared_key)
        print(json_token.decode())
        print()
        #
        # * verify
        received: JWTClaims = jwt.decode(json_token, key=shared_key)
        received.validate()
        print(received)
        print()


if __name__ == '__main__':
    asyncio.run(main=main())
    # asyncio.run(main=alt_main())
